engine {

  applyTo("pom.xml") {
    ReplaceSnippet("<groupId>com.example</groupId>", `<groupId>#{#groupId.toLowerCase()}</groupId>`)
    ReplaceSnippet("spring-streaming-app", #artifactId.toLowerCase())
  }

  applyTo("src/main/resources/application.yaml") {
    ReplaceSnippet("Foo", #objectModelClassName)
    YTT()
  }

  if (#applicationRole == 'source') {
    Exclude({"**/FooProcessor.java", "**/FooSink.java"})
  }

  if (#applicationRole == 'processor') {
    Exclude({"**/FooSource.java", "**/FooSink.java"})
  }

  if (#applicationRole == 'sink') {
    Exclude({"**/FooSource.java", "**/FooProcessor.java"})
  }

  let modelObject = #objectModelClassName.toLowerCase() in {
    applyTo("src/main/java/com/example/stream/model/Foo.java") {
      ReplaceSnippet(text: "Foo", with: #objectModelClassName)
      RewritePath(regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)model(?<untouchedpath>.*)" , rewriteTo: `src/#{#sourceset}/java/#{#currentpackage}/model/#{#objectModelClassName}.java`)
    }
    applyTo("src/main/java/com/example/stream/functions/**.java") {
      ReplaceSnippet(text: "Foo", with: #objectModelClassName)
      ReplaceSnippet(text: "foo", with: #modelObject)
      RewritePath(regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)functions/Foo(?<untouchedpath>.*)" , rewriteTo: `src/#{#sourceset}/java/#{#currentpackage}/functions/#{#objectModelClassName}#{#untouchedpath}`)
    }
  }

  let packageDirectory = #packageName.replace(".", "/") in {
    applyTo("**/*.java") {
      ReplaceSnippet(text: "com.example.stream", with: #packageName)
      RewritePath(regex: "src/(?<sourceset>.*)/java/(?<currentpackage>.*/)stream(?<untouchedpath>.*)" , rewriteTo: `src/#{#sourceset}/java/#{#packageDirectory}/#{#untouchedpath}`)
    }
  }

  // Update the artifact name as needed
  applyTo("README.md") {
    ReplaceSnippet(text: "streaming-app", with: #artifactId.toLowerCase())
  }

  {
    Include({'**'})
    + InvokeFragment("build-wrapper-maven")
  }
  UniquePath(strategy: UseLast)

  // Create the provenance file
  Provenance()

}
